import {ContentTypeEnum} from '../../models/common/content.enum';
import {TaskTypeEnum} from '../../models/common/task.type.enum';

/**
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
export interface PaginatedResult<R, C> extends Response {
  aggregation: any;
  data: Array<R>;
  page: C;
  status: number;
  statusCode: number;
  total: C;
}

export interface PaginationMetadata<C> {
  page?: C;
  search?: string | null;
  total?: C;
  perPage?: C;
  type?: ContentTypeEnum;
  orderBy?: string;
  status?: any;
  leadId?: string;
  userId?: string;
  isAscending?: boolean;
  fromDate?: string;
  toDate?: string;
  organization?: string;
  startedAt?: string;
  endedAt?: string;
  createdBy?: string;
  team?: string;
  teams?: string | Array<string>;
  assignToUser?: string;
  isAssignByMe?: boolean;
  isOrganization?: boolean;
}
export enum FilterActionKeys {
  isUntouched = 'isUntouched',
  isNotCalled = 'isNotCalled',
  isFollowUp = 'isFollowUp',
  isNotAssign = 'isNotAssign',
}
export interface LeadFilterMetadata {
  sort: {
    orderBy: string;
    isAscending: boolean;
  };
  [FilterActionKeys.isUntouched]?: boolean;
  [FilterActionKeys.isNotCalled]?: boolean;
  [FilterActionKeys.isFollowUp]?: boolean;
  [FilterActionKeys.isNotAssign]?: boolean;
  paginationParams: {
    page: number;
    perPage: number;
  };
  search?: string;
  note?: string;
  list?: string;
  date?: {
    startedAt: string;
    endedAt: string;
  };
  label?: Array<string>;
  status?: Array<string>;
  source?: Array<string>;
  byOrganization?: boolean;
  teams?: Array<string>;
  teamMembers?: Array<string>;
  activity?: {
    type: string;
    single: {
      key: string;
      value: string;
    };
    range: {
      start: {
        key: string;
        value: string;
      };
      end: {
        key: string;
        value: string;
      };
    };
  };
  customField?: {
    key: string;
    value: string;
  };
  followup?: {
    isFollowup: boolean;
    single: {
      start: Date;
      end: Date;
    };
  };
  assign?: {
    isAssign: boolean;
    teamMembers: Array<string>;
  };
}

export interface PaginationQuery {
  page?: number;
  perPage?: number;
  search?: string;
  orderBy?: string;
  list?: string;
  leadId?: string;
  status?: string;
  isAscending?: boolean;
  total?: number;
}
export interface PaginationQueryByCategory {
  categoryId: string;
  offset?: number;
  limit?: number;
  search?: string;
}

export interface PaginationFolloUpdata<R, C> {
  aggregation: C;
  data: Array<R>;
  page?: number;
}
